package com.css.mgr.admin.ctrl.role;

import java.util.*;

import javax.servlet.http.HttpServletRequest;

import com.css.mgr.admin.common.IDUtil;
import com.css.mgr.admin.srv.dict.IDictService;
import com.css.mgr.admin.srv.func.IFuncService;
import com.css.mgr.admin.srv.sys.ISysService;
import com.css.mgr.base.dao.pojo.*;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.css.mgr.admin.srv.role.SRoleService;
import com.css.mgr.base.CssController;

import net.sf.json.JSONObject;

@Controller
@RequestMapping("/role")
public class RoleController extends CssController{
	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	@Qualifier("roleService")
	private SRoleService sRoleService;
	@Autowired
	@Qualifier("sysService")
	private ISysService sysService;
	@Autowired
	@Qualifier("funcService")
	private IFuncService funcService;
	
	@Autowired
	private IDictService dictService;

	@RequestMapping(value="/dir",method=RequestMethod.GET)
	public String dir(Model model){
		logger.info(">>>>>>user:"+getUser().getRealName());

		model.addAttribute("openFlag", OpenFlag.OPEN);
		model.addAttribute("colseFlag",OpenFlag.CLOSE);
		model.addAttribute("sysList",sRoleService.getAllSys());

		String sysId =  "1001";
		model.addAttribute("checkedSysId",sysId);
		List<SSys> syses = sysService.findByOpenFlag(OpenFlag.OPEN);
		model.addAttribute("syses",syses);
		String treeHtml = funcService.getTreeHtml(sysId);
		model.addAttribute("funcTreeHtml",treeHtml);
		//
		JSONObject openflag=new JSONObject();
		openflag.put("0",dictService.getDictTypeAndCode("d_openFlag","0"));
		openflag.put("1",dictService.getDictTypeAndCode("d_openFlag","1"));
		JSONObject dict=new JSONObject();
		dict.put("openflag",openflag);
		model.addAttribute("dict", dict);
		//
		
		return "admin/role/dir";
	}
	@RequestMapping(value="/query",method=RequestMethod.GET)
	@ResponseBody
	public Map<Object,Object> query(HttpServletRequest request) {
		Set<String> keySet = request.getParameterMap().keySet();
		for(String keyName : keySet) {
			logger.info("keyName:"+keyName);
		}
		Sort.Direction orderDir = Sort.Direction.ASC;
		String columnName = "uuid";
		int draw = Integer.parseInt(request.getParameter("draw"));//请求次数
		int start = Integer.parseInt(request.getParameter("start"));//数据起始位置
		int length = Integer.parseInt(request.getParameter("length"));//数据长度
		String order = request.getParameter("order[0][column]");//获取需要排序的字段索引
		String dir = request.getParameter("order[0][dir]");//获取需要排序字段的排序方向
		String column = request.getParameter("columns["+order+"][data]");//根据索引获取字段名称
		String searchValue = request.getParameter("search[value]");//获取用户过滤框里的字符
		String sysId = request.getParameter("sysId");
		String name = request.getParameter("name");

		JSONObject paramJson = new JSONObject();
		paramJson.put("sysId", sysId);
		paramJson.put("name", name);

		logger.info("paramJson:"+paramJson);
		if(IDUtil.isNotEmpty(dir)&& !dir.equals("asc")) {
			orderDir = Sort.Direction.DESC;
		}
		if(IDUtil.isNotEmpty(column)) {
			columnName = column;
		}
		//总记录数
		String recordsTotal = "0";
		//过滤后记录数
		String recordsFiltered = "0";
		int page = start / length;
		Sort sort = new Sort(orderDir, columnName);
		Pageable pageable = new PageRequest(page,length,sort);

		Page<SRole> orgPageAll = sRoleService.findAll(paramJson,pageable);

		Page<SRole> orgPageFiltered = sRoleService.listSerach(paramJson,searchValue, pageable);

		if(orgPageAll!=null && orgPageAll.getTotalElements()>0) {
			logger.info(">>>>>>orgPageAll:"+orgPageAll.getTotalElements());
			recordsTotal = String.valueOf(orgPageAll.getTotalElements());
		}
		if(orgPageFiltered!=null && orgPageFiltered.getTotalElements()>0) {
			logger.info(">>>>>>postPageFiltered:"+orgPageFiltered.getTotalElements());
			recordsFiltered = String.valueOf(orgPageFiltered.getTotalElements());
		}
		Map<Object,Object> pageInfo = new HashMap<Object,Object>();
		pageInfo.put("data", orgPageFiltered.getContent());
		pageInfo.put("draw", draw);
		pageInfo.put("recordsTotal", recordsTotal);
		pageInfo.put("recordsFiltered", recordsFiltered);
		return pageInfo;
	}

	@RequestMapping(value="/add",method=RequestMethod.POST)
	@ResponseBody
	public Map<Object,Object> add(SRole sRole){
		logger.info("sOrg:"+sRole);
		if(StringUtils.isEmpty(sRole.getUuid()))
			sRole.setUuid(IDUtil.getId());
		sRole=sRoleService.save(sRole);
		Map<Object,Object> map = new HashMap<Object,Object>();
		try {
			map.put("sRole", sRole);
			map.put("success", "1");
		} catch (Exception e) {
			map.put("success", "0");
		}
		return map;
	}

	@RequestMapping(value="/del",method=RequestMethod.POST)
	@ResponseBody
	public Map<Object,Object> del(String uuid){
		logger.info("uuid:"+uuid);
		sRoleService.del(Arrays.asList(uuid.split(",")));
		Map<Object,Object> map = new HashMap<Object,Object>();
		try {
			map.put("success", "1");
		} catch (Exception e) {
			map.put("success", "0");
		}
		return map;
	}

	@RequestMapping(value="/get",method=RequestMethod.GET)
	@ResponseBody
	public Map<Object,Object> get(String uuid){
		logger.info("uuid:"+uuid);
		SRole sRole = sRoleService.getRoleByUuid(uuid);
		Map<Object,Object> map = new HashMap<Object,Object>();
		try {
			map.put("sRole", sRole);
			map.put("success", "1");
		} catch (Exception e) {
			map.put("success", "0");
		}
		return map;
	}

	@RequestMapping(value="/queryRes",method=RequestMethod.GET)
	@ResponseBody
	public Map<Object,Object> queryRes(HttpServletRequest request) {
		Set<String> keySet = request.getParameterMap().keySet();
		for(String keyName : keySet) {
			logger.info("keyName:"+keyName);
		}
		Sort.Direction orderDir = Sort.Direction.ASC;
		String columnName = "uuid";
		int draw = Integer.parseInt(request.getParameter("draw"));//请求次数
		int start = Integer.parseInt(request.getParameter("start"));//数据起始位置
		int length = Integer.parseInt(request.getParameter("length"));//数据长度
		String order = request.getParameter("order[0][column]");//获取需要排序的字段索引
		String dir = request.getParameter("order[0][dir]");//获取需要排序字段的排序方向
		String column = request.getParameter("columns["+order+"][data]");//根据索引获取字段名称
		String searchValue = request.getParameter("search[value]");//获取用户过滤框里的字符
		String roleId = request.getParameter("roleId");
		JSONObject paramJson = new JSONObject();
		paramJson.put("roleId", roleId);

		logger.info("paramJson:"+paramJson);
		if(StringUtils.isNotEmpty(dir) && !dir.equals("asc")) {
			orderDir = Sort.Direction.DESC;
		}
		if(StringUtils.isNotEmpty(column)) {
			columnName = column;
		}
		//总记录数
		String recordsTotal = "0";
		//过滤后记录数
		String recordsFiltered = "0";
		int page = start / length;
		Sort sort = new Sort(orderDir, columnName);
		Pageable pageable = new PageRequest(page,length,sort);

		Page<SResource> sResourcePageAll = sRoleService.findAllResByRole(paramJson,pageable);

		Page<SResource> sResourcePageFiltered = sRoleService.listSerachResByRole(paramJson,searchValue, pageable);


		if(sResourcePageAll!=null && sResourcePageAll.getTotalElements()>0) {
			logger.info(">>>>>>sPostPageAll:"+sResourcePageAll.getTotalElements());
			recordsTotal = String.valueOf(sResourcePageAll.getTotalElements());
		}
		if(sResourcePageFiltered!=null && sResourcePageFiltered.getTotalElements()>0) {
			logger.info(">>>>>>postPageFiltered:"+sResourcePageFiltered.getTotalElements());
			recordsFiltered = String.valueOf(sResourcePageFiltered.getTotalElements());
		}
		Map<Object,Object> pageInfo = new HashMap<Object,Object>();
		pageInfo.put("data", sResourcePageFiltered.getContent());
		pageInfo.put("draw", draw);
		pageInfo.put("recordsTotal", recordsTotal);
		pageInfo.put("recordsFiltered", recordsFiltered);
		return pageInfo;
	}

	@RequestMapping(value="/addRes",method=RequestMethod.POST)
	@ResponseBody
	public Map<Object,Object> addRes(String roleId,String resIds){
		List<SRoleResource> sRoleResourceList=new ArrayList<SRoleResource>();
		SRoleResource srr=null;

		for (String resId: resIds.split(",")) {
			if(StringUtils.isNotEmpty(resId)){
				srr=new SRoleResource();
				srr.setRoleId(roleId);
				srr.setResourceId(resId);
				srr.setUuid(IDUtil.getId());
				sRoleResourceList.add(srr);
			}
		}
		List<SRoleResource> srrList=sRoleService.saveRoleRes(sRoleResourceList);
		Map<Object,Object> map = new HashMap<Object,Object>();
		try {
			map.put("sOrgPostList", srrList);
			map.put("success", "1");
		} catch (Exception e) {
			map.put("success", "0");
		}
		return map;
	}


	@RequestMapping(value="/delRes",method=RequestMethod.POST)
	@ResponseBody
	public Map<Object,Object> delRes(String roleId,String resIds){
		List<SRoleResource> sRoleResourceList=new ArrayList<SRoleResource>();
		SRoleResource srr=null;

		for (String resId: resIds.split(",")) {
			if(StringUtils.isNotEmpty(resId)){
				srr=new SRoleResource();
				srr.setRoleId(roleId);
				srr.setResourceId(resId);
				sRoleResourceList.add(srr);
			}
		}
		Map<Object,Object> map = new HashMap<Object,Object>();
		try {
			sRoleService.delRoleRes(sRoleResourceList);
			map.put("success", "1");
		} catch (Exception e) {
			map.put("success", "0");
		}
		return map;
	}
}
