package com.css.mgr.bpm.freeflow.ctrl;

import java.util.HashMap;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import com.css.mgr.admin.common.IDUtil;
import com.css.mgr.base.CssController;
import com.css.mgr.bpm.freeflow.dao.pojo.FfDef;
import com.css.mgr.bpm.freeflow.srv.FlowDefService;
import net.sf.json.JSONObject;

@Controller
@RequestMapping("/def")
public class DefController extends CssController {
	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	@Autowired
	private FlowDefService flowDefService;
    
	
	
	@RequestMapping(value="/dir",method=RequestMethod.GET)
	public String dir(Model model){
		logger.info(">>>>>>user:"+getUser().getRealName());
		return "freeflow/def/dirdef";
	}
	
	
	@ResponseBody
	@RequestMapping(value = "/add", method = RequestMethod.POST)
	public String add(FfDef item) {
		if(StringUtils.isEmpty(item.getFfDefUuid())) {
			item.setFfDefUuid(IDUtil.getId());
		}
		return flowDefService.addFfDef(item).toString();
	}

	@ResponseBody
	@RequestMapping(value = "/del", method = RequestMethod.POST)
	public String del(String ids) {
		return flowDefService.delFfDef(ids).toString();
	}

	@ResponseBody
	@RequestMapping(value = "/get", method = RequestMethod.GET)
	public String get(String ffDefUuid) {
		return flowDefService.getDef(ffDefUuid).toString();
	}

	@ResponseBody
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public String update(FfDef item) {
		return flowDefService.updFfDef(item).toString();
	}
     
	@RequestMapping(value="/getCode",method=RequestMethod.GET)
	@ResponseBody
	public Map<Object,Object> getCode(String id){
		logger.info("id:"+id); 
		Map<Object,Object> map =new HashMap<Object,Object>();
		FfDef ffDef = flowDefService.get(id);
		if(ffDef!=null)
		map.put("success","0");
		return map;
	}
	
	
	@ResponseBody
	@RequestMapping(value = "/queryAll", method = RequestMethod.GET)
	public Map<Object, Object> query(HttpServletRequest request) {
		Direction orderDir = Direction.ASC; 
		String columnName = "name";
		int draw = Integer.parseInt(request.getParameter("draw"));//请求次数
		int start = Integer.parseInt(request.getParameter("start"));//数据起始位置
		int length = Integer.parseInt(request.getParameter("length"));//数据长度
		String order = request.getParameter("order[0][column]");//获取需要排序的字段索引
		String dir = request.getParameter("order[0][dir]");//获取需要排序字段的排序方向
		String column = request.getParameter("columns["+order+"][data]");//根据索引获取字段名称
	    String searchValue = request.getParameter("search[value]");//获取用户过滤框里的字符
	    String name = request.getParameter("name");
	    
	    JSONObject paramJson = new JSONObject();
	    paramJson.put("name", name);
	    logger.info("paramJson:"+paramJson);
	    if(StringUtils.isNotEmpty(dir) && !dir.equals("asc")) {
			orderDir = Direction.DESC;
		}
		if(column!=null && column != "") {
			columnName = column;
		}
		 //总记录数
	    String recordsTotal = "0";
	    //过滤后记录数
	    String recordsFiltered = "";
	    int page = start / length;
	    Sort sort = new Sort(orderDir, columnName);
	    Pageable pageable = new PageRequest(page,length,sort);
	    
	    Page<FfDef> postPageAll = flowDefService.findAll(paramJson,pageable);
	    
	    Page<FfDef> postPageFiltered = flowDefService.listSerach(paramJson,searchValue, pageable);
	    
		if(postPageAll!=null && postPageAll.getTotalElements()>0) {
			logger.info(">>>>>>postPageAll:"+postPageAll.getTotalElements());
			recordsTotal = String.valueOf(postPageAll.getTotalElements());
		}
		if(postPageFiltered!=null && postPageFiltered.getTotalElements()>0) {
			logger.info(">>>>>>postPageFiltered:"+postPageFiltered.getTotalElements());
			recordsFiltered = String.valueOf(postPageFiltered.getTotalElements());
		}
		Map<Object,Object> pageInfo = new HashMap<Object,Object>();
		pageInfo.put("data", postPageFiltered.getContent());
		pageInfo.put("draw", draw);
		pageInfo.put("recordsTotal", recordsTotal);
		pageInfo.put("recordsFiltered", recordsFiltered);
		return pageInfo;
	}
  
}
